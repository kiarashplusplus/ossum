{"version":3,"sources":["App.js","index.js"],"names":["videos","Bridge","video","cover","buttons","startTime","endTime","name","Sunrise","Beach","MenuItem","_ref","text","selected","react_default","a","createElement","className","concat","App","state","componentDidMount","_this","player","subscribeToStateChange","handleStateChange","bind","Object","assertThisInitialized","onSelect","key","setState","this","getState","console","log","currentTime","filtered","filter","_ref2","_this2","_videos$this$state$se","lib","ref","autoPlay","playsInline","poster","src","preload","build_default","data","map","el","App_MenuItem","hideArrows","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"4SAOMA,SAAS,CACbC,OAAQ,CACNC,MAAO,sBACPC,MAAO,sBACPC,QAAS,CACP,CACEC,UAAW,EACXC,QAAS,GACTC,KAAM,WAER,CACEF,UAAW,EACXC,QAAS,GACTC,KAAM,WAIZC,QAAS,CACPN,MAAO,mCACPC,MAAO,mCACPC,QAAS,CACP,CACEC,UAAW,EACXC,QAAS,IACTC,KAAM,YAIZE,MAAO,CACLP,MAAO,+CACPC,MAAO,kDAILO,EAAW,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACxB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAAeL,EAAW,SAAW,KAAOD,IAwEpDO,6MA7DbC,MAAQ,CACNP,SAAU,SACVT,QAAS,CAAC,CAAEG,KAAM,WAAa,CAAEA,KAAM,aAGzCc,kBAAoB,WAClBC,EAAKC,OAAOC,uBAAuBF,EAAKG,kBAAkBC,KAAvBC,OAAAC,EAAA,EAAAD,CAAAL,QAqBrCO,SAAW,SAAAC,GACTR,EAAKS,SAAS,CAAElB,SAAUiB,sFAnBVV,GAAO,IACfG,EAAWS,KAAKT,OAAOU,WAAvBV,OACRW,QAAQC,IAAIH,KAAKZ,MAAMP,SAAUU,EAAOa,aAGxC,IAAMhC,EAAUJ,EAAOgC,KAAKZ,MAAMP,UAAUT,QAC5C,GAAIA,EAAS,CACX,IAAMiC,EAAWC,iBACflC,EACA,SAAAmC,GAAA,IAAGlC,EAAHkC,EAAGlC,UAAWC,EAAdiC,EAAcjC,QAAd,OACED,EAAYkB,EAAOa,aAAeb,EAAOa,YAAc9B,IAE3D0B,KAAKD,SAAS,CAAE3B,QAASiC,SAEzBL,KAAKD,SAAS,CAAE3B,QAAS,sCAQpB,IAvCUA,EAASS,EAuCnB2B,EAAAR,KAAAS,EACkBzC,EAAOgC,KAAKZ,MAAMP,UAAnCX,EADDuC,EACCvC,MAAOC,EADRsC,EACQtC,MAEf,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAC0B,EAAA,OAAD,CACEC,IAAK,SAAApB,GACHiB,EAAKjB,OAASA,GAEhBqB,UAAQ,EACRC,aAAW,EACXC,OA1FW,2CA0Fc3C,EACzB4C,IA3FW,2CA2FW7C,EACtB8C,QAAQ,SAEVlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACEmC,MAzDO9C,EAyDI4B,KAAKZ,MAAMhB,QAzDNS,EAyDemB,KAAKZ,MAAMP,SAxDtDT,EAAQ+C,IAAI,SAAAC,GAAM,IACR7C,EAAS6C,EAAT7C,KAER,OAAOO,EAAAC,EAAAC,cAACqC,EAAD,CAAUzC,KAAML,EAAMuB,IAAKvB,EAAMM,SAAUA,OAsDxCyC,YAAU,EACVzC,SAAUmB,KAAKZ,MAAMP,SACrBgB,SAAUG,KAAKH,qBArDX0B,aC/ClBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.96ec2817.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\nimport { Player } from \"video-react\";\nimport { filter } from \"lodash\";\nimport \"./App.css\";\n\nconst ossumVideosUrl = \"https://ossum-tv.firebaseapp.com/videos/\";\nconst videos = {\n  Bridge: {\n    video: \"Bridge In Place.mp4\",\n    cover: \"Bridge In Place.jpg\",\n    buttons: [\n      {\n        startTime: 2,\n        endTime: 10,\n        name: \"Sunrise\"\n      },\n      {\n        startTime: 6,\n        endTime: 15,\n        name: \"Beach\"\n      }\n    ]\n  },\n  Sunrise: {\n    video: \"coverr-sunrise-1563948708950.mp4\",\n    cover: \"coverr-sunrise-1563948708950.jpg\",\n    buttons: [\n      {\n        startTime: 0,\n        endTime: 1000,\n        name: \"Bridge\"\n      }\n    ]\n  },\n  Beach: {\n    video: \"coverr-bali-beach-overhead-1563969579253.mp4\",\n    cover: \"coverr-bali-beach-overhead-1563969579253.jpg\"\n  }\n};\n\nconst MenuItem = ({ text, selected }) => {\n  return <div className={`menu-item ${selected ? \"active\" : \"\"}`}>{text}</div>;\n};\n\nexport const Menu = (buttons, selected) =>\n  buttons.map(el => {\n    const { name } = el;\n\n    return <MenuItem text={name} key={name} selected={selected} />;\n  });\n\nclass App extends Component {\n  state = {\n    selected: \"Bridge\",\n    buttons: [{ name: \"Sunrise\" }, { name: \"Beach\" }]\n  };\n\n  componentDidMount = () => {\n    this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n  };\n\n  handleStateChange(state) {\n    const { player } = this.player.getState();\n    console.log(this.state.selected, player.currentTime);\n\n    // Check all buttons for the selected video and filter to the ones for currentTime\n    const buttons = videos[this.state.selected].buttons;\n    if (buttons) {\n      const filtered = filter(\n        buttons,\n        ({ startTime, endTime }) =>\n          startTime < player.currentTime && player.currentTime < endTime\n      );\n      this.setState({ buttons: filtered });\n    } else {\n      this.setState({ buttons: [] });\n    }\n  }\n\n  onSelect = key => {\n    this.setState({ selected: key });\n  };\n\n  render() {\n    const { video, cover } = videos[this.state.selected];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Player\n            ref={player => {\n              this.player = player;\n            }}\n            autoPlay\n            playsInline\n            poster={ossumVideosUrl + cover}\n            src={ossumVideosUrl + video}\n            preload=\"auto\"\n          />\n          <div className=\"Menu\">\n            <ScrollMenu\n              data={Menu(this.state.buttons, this.state.selected)}\n              hideArrows\n              selected={this.state.selected}\n              onSelect={this.onSelect}\n            />\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}